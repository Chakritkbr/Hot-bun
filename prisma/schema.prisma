generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(GUEST) // ค่าเริ่มต้นเป็น GUEST
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart?
  orders    Order[]
}

enum Role {
  GUEST
  USER
  ADMIN
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  products    Product[]
}

model Discount {
  id         String   @id @default(uuid())
  code       String   @unique
  percentage Float
  start_date DateTime
  end_date   DateTime
}

model OtpCode {
  id        Int      @id @default(autoincrement())
  email     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  price       Float
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Cart {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  CartItem       CartItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String  @map("cart_id")
  productId String
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id]) // ✅ เพิ่มความสัมพันธ์
}

model Order {
  id         String      @id @default(cuid()) // Unique Order ID
  userId     String                             // ผู้ใช้ที่สั่งซื้อ
  user       User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]                    // รายการสินค้าในออเดอร์
  total      Float                          // ราคารวมของออเดอร์
  status     OrderStatus @default(PENDING)  // สถานะออเดอร์
  createdAt  DateTime    @default(now())    // วันที่สร้าง
  updatedAt  DateTime    @updatedAt         // อัปเดตล่าสุด
}

model OrderItem {
  id        String  @id @default(cuid()) 
  orderId   String  
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     // จำนวนสินค้าที่สั่งซื้อ
  price     Float   // ราคาสินค้า ณ เวลาสั่งซื้อ
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}


